"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[261],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>f});var r=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var c=r.createContext({}),l=function(e){var t=r.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(i),m=n,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return i?r.createElement(f,o(o({ref:t},u),{},{components:i})):r.createElement(f,o({ref:t},u))}));function f(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=i.length,o=new Array(a);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<a;l++)o[l]=i[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,i)}m.displayName="MDXCreateElement"},8295:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=i(7462),n=(i(7294),i(3905));const a={sidebar_position:4},o="Trust List Specification",s={unversionedId:"trust-list-specification",id:"trust-list-specification",title:"Trust List Specification",description:"Introduction",source:"@site/docs/trust-list-specification.md",sourceDirName:".",slug:"/trust-list-specification",permalink:"/cc-pki/trust-list-specification",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/trust-list-specification.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Trust Registry Network",permalink:"/cc-pki/trust-reg-network"},next:{title:"Trust Gateway",permalink:"/cc-pki/category/trust-gateway"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Requirements",id:"requirements",level:2},{value:"DID Document",id:"did-document",level:2}],u={toc:l};function d(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"trust-list-specification"},"Trust List Specification"),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"Universal verifier applications that support different credential standards are complicated by wide variability in format of the credential payloads, signatures, key formats, and key distribution methods. Public keys formats include x509 certificates, JSON Web Key Sets (JWKS), and DID documents. Signing key distribution methods include API gateways, hosted by issuer at a pre-defined URL, embedded in certificates, and by blockchain based resolution. Establishing root of trust by trust anchor or distributing trust list has been accomplished by API gateway, hosted URL, private dissemination and other bilateral sharing agreements."),(0,n.kt)("p",null,"While some variability is expected in an approach that preserves sovereignty, there are opportunities for alignment in key format and distribution for the sake of fostering interoperability. With that goal, we provide a unifying trust list format to assemble and share public key infrastructure for all credential specifications used by existing trust networks. Importantly, this format does not enforce a particular policy framework for members of the trust network."),(0,n.kt)("h2",{id:"requirements"},"Requirements"),(0,n.kt)("p",null,"The common trust list specification defines the lowest common denominator format that can interoperate between all included specifications and can support the minimal required features from each specification. This includes considering the minimum security requirements that satisfy each of the specifications. It was designed taking into account the following tenets:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"SHALL be convertible from each existing trust network's formats"),(0,n.kt)("li",{parentName:"ol"},"SHALL describe a key-to-trust-anchor path for all specifications"),(0,n.kt)("li",{parentName:"ol"},"SHALL be cacheable"),(0,n.kt)("li",{parentName:"ol"},"SHALL be mergeable (trust list operators can integrate each other's entries)"),(0,n.kt)("li",{parentName:"ol"},"SHALL be usable by all stakeholders required to verify health credentials in their operations")),(0,n.kt)("h2",{id:"did-document"},"DID Document"),(0,n.kt)("p",null,"The unified format is based on the ",(0,n.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/did-core/"},"Decentralized Identifiers (DIDs) v1.0")," specification. DIDs are globally unique identifier in the form of URIs. The URI scheme includes a method name which corresponds to a standard method by which a DID Document can be resolved. This DID Document is a structured JSON-LD which captures each existing public key (regardless of X.509 or JWK format used) by the members of a trust network in a common format. It allows additional metadata (such as intended purpose and key identifiers) to be added to existing keys with changing the underlying keys themselves\u200b. It provides means to publish and cryptographically sign a master lists of keys recognized used by a trust network."),(0,n.kt)("p",null,"The unified format DID method selected is did:web, a method to retrieve DID Documents via existing web (https) infrastructure\u200b. \u200bThe did:web identifiers have the form ",(0,n.kt)("inlineCode",{parentName:"p"},"<DOMAIN NAME>:<PATH COMPONENT 1>:...: <PATH COMPONENT N>"),"\u200b. Resolution is accomplished by https GET against the URL which is formed from this identifier by\u200b ",(0,n.kt)("inlineCode",{parentName:"p"},"https://\u200bDOMAIN NAME/PATH COMPONENT 1/.../PATH COMPONENT N/did.json"),". For example did:web:example.com:my:path would resolve a DID Document from the URL ",(0,n.kt)("inlineCode",{parentName:"p"},"https://example.com/my/path/did.json"),"\u200b. Additional did methods may be supported in the future."),(0,n.kt)("p",null,"The DID Document itself should have:\u200b"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"an \u2018id\u2019 field which is the DID itself and represents the DID Subject, in this case the trust list"),(0,n.kt)("li",{parentName:"ul"},"a list of public keys within the \u2018verificationMethod\u2019 field\u200b"),(0,n.kt)("li",{parentName:"ul"},"an optional signature via a \u2018proof\u2019 field\u200b")),(0,n.kt)("p",null,"The verificationMethod array represents the individual signing keys associated with issuers within the entity represented by the DID Subject, an includes:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"an ",(0,n.kt)("inlineCode",{parentName:"li"},"id")," field which is a DID URL composed of the DID for this DID Document and key ID as \u200bDID#key"),(0,n.kt)("li",{parentName:"ul"},"controller of the public key, which can be current document (in case of publishing a key by a trust network member) or the source of the public key in case of an aggregator "),(0,n.kt)("li",{parentName:"ul"},"the public key JWK, including the key's x509 and chain of trust to Root Certificate Authority\u200b")),(0,n.kt)("p",null,"The DID Document itself can be signed with addition of a \u2018proof\u2019 block containing signature details and key used for verification."),(0,n.kt)("p",null,"For more information regarding the DID Document format for a Trust List specification, see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/WorldHealthOrganization/ddcc-trust/blob/main/TrustListSpecification.md#leading-contender-did-document"},"WHO DDCC Trust List Specification documentation"),". For an example of a signed DID Document, see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/WorldHealthOrganization/ddcc-trust/blob/main/TrustListSpecification.md#appendix-a-signed-did-document-for-x509-enabled-trust-lists-of-leaf-keys"},"Appendix A")," of the documentation."))}d.isMDXComponent=!0}}]);